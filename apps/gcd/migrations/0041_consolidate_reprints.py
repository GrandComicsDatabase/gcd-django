# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-03-07 00:13
from __future__ import unicode_literals

from django.db import migrations


def consolidate_reprints(apps, schema_editor):
    Reprint = apps.get_model('gcd', 'Reprint')
    IssueReprint = apps.get_model('gcd', 'IssueReprint')
    ReprintFromIssue = apps.get_model('gcd', 'ReprintFromIssue')
    ReprintToIssue = apps.get_model('gcd', 'ReprintToIssue')
    ReprintRevision = apps.get_model('oi', 'ReprintRevision')

    # First, fixup the existing Reprint objects.
    print ('\n1. Fixup the existing Reprint objects')
    last_id = Reprint.objects.latest('id').id
    reprints = Reprint.objects.order_by('id') \
                      .select_related('origin', 'target')
    for batch in range(int(last_id/100000)+1):
        print ('Batch %d' % batch)
        for reprint in reprints[batch*100000:(batch+1)*100000]:
            reprint.origin_issue = reprint.origin.issue
            reprint.target_issue = reprint.target.issue
            reprint.save()

    # And existing reprint revisions.
    print ('2. Fixup existing reprint revisions')
    last_id = ReprintRevision.objects.latest('id').id
    reprints = ReprintRevision.objects.order_by('id') \
                              .select_related('origin_story', 'target_story')
    for batch in range(int(last_id/100000)+1):
        print ('Batch %d' % batch)
        for rev in reprints[batch*100000:(batch+1)*100000]:
            if rev.origin_story:
                rev.origin_issue = rev.origin_story.issue
            if rev.target_story:
                rev.target_issue = rev.target_story.issue
            rev.save()

    print ('3. Converting to be removed tables')
    for issue_reprint in IssueReprint.objects.order_by('id'):
        reprint = Reprint(origin_issue=issue_reprint.origin_issue,
                          target_issue=issue_reprint.target_issue,
                          notes=issue_reprint.notes)
        reprint.save()
        revisions = ReprintRevision.objects.filter(issue_reprint=issue_reprint)
        for rev in revisions:
            rev.reprint = reprint
            rev.issue_reprint = None
            rev.save()

    for from_issue in ReprintFromIssue.objects.order_by('id') \
                                      .select_related('target'):
        # NOTE: We do not have the custom save() here, so must set issues!
        reprint = Reprint(origin_issue=from_issue.origin_issue,
                          target=from_issue.target,
                          target_issue=from_issue.target.issue,
                          notes=from_issue.notes)
        reprint.save()
        revisions = \
            ReprintRevision.objects.filter(reprint_from_issue=from_issue)
        for rev in revisions:
            rev.reprint = reprint
            rev.reprint_from_issue = None
            rev.save()

    for to_issue in ReprintToIssue.objects.order_by('id') \
                                  .select_related('origin'):
        # NOTE: We do not have the custom save() here, so must set issues!
        reprint = Reprint(origin=to_issue.origin,
                          origin_issue=to_issue.origin.issue,
                          target_issue=to_issue.target_issue,
                          notes=to_issue.notes)
        reprint.save()
        revisions = ReprintRevision.objects.filter(reprint_to_issue=to_issue)
        for rev in revisions:
            rev.reprint = reprint
            rev.reprint_to_issue = None
            rev.save()


class Migration(migrations.Migration):

    dependencies = [
        ('gcd', '0040_expand_reprint_table'),
        ('oi', '0038_sourced_credits'),
    ]

    operations = [
        migrations.RunPython(consolidate_reprints)
    ]
