# -*- coding: utf-8 -*-
# Generated by Django 1.11.28 on 2020-02-23 15:25
from __future__ import unicode_literals

import apps.gcd.models.image
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0001_initial'),
        ('stddata', '0001_initial'),
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('year_began', models.IntegerField(db_index=True, null=True)),
                ('year_ended', models.IntegerField(null=True)),
                ('year_began_uncertain', models.BooleanField(db_index=True, default=False)),
                ('year_ended_uncertain', models.BooleanField(db_index=True, default=False)),
                ('notes', models.TextField()),
                ('url', models.URLField(blank=True, default='', max_length=255)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('issue_count', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BrandGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('year_began', models.IntegerField(db_index=True, null=True)),
                ('year_ended', models.IntegerField(null=True)),
                ('year_began_uncertain', models.BooleanField(db_index=True, default=False)),
                ('year_ended_uncertain', models.BooleanField(db_index=True, default=False)),
                ('notes', models.TextField()),
                ('url', models.URLField(blank=True, default='', max_length=255)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('issue_count', models.IntegerField(default=0)),
                ('keywords', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['name'],
                'db_table': 'gcd_brand_group',
            },
        ),
        migrations.CreateModel(
            name='BrandUse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_began', models.IntegerField(db_index=True, null=True)),
                ('year_ended', models.IntegerField(null=True)),
                ('year_began_uncertain', models.BooleanField(db_index=True, default=False)),
                ('year_ended_uncertain', models.BooleanField(db_index=True, default=False)),
                ('notes', models.TextField()),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('created', models.DateField(auto_now_add=True)),
                ('modified', models.DateField(auto_now=True)),
                ('emblem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_use', to='gcd.Brand')),
            ],
            options={
                'db_table': 'gcd_brand_use',
            },
        ),
        migrations.CreateModel(
            name='Cover',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marked', models.BooleanField(default=False)),
                ('limit_display', models.BooleanField(default=False)),
                ('is_wraparound', models.BooleanField(default=False)),
                ('front_left', models.IntegerField(blank=True, default=0, null=True)),
                ('front_right', models.IntegerField(blank=True, default=0, null=True)),
                ('front_bottom', models.IntegerField(blank=True, default=0, null=True)),
                ('front_top', models.IntegerField(blank=True, default=0, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True, db_index=True)),
                ('last_upload', models.DateTimeField(db_index=True, null=True)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'ordering': ['issue'],
                'get_latest_by': 'id',
                'permissions': (('can_upload_cover', 'can upload cover'),),
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(db_index=True, null=True)),
                ('image_file', models.ImageField(upload_to=apps.gcd.models.image.get_generic_image_path)),
                ('marked', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified', models.DateTimeField(auto_now=True, null=True)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'gcd_image',
            },
        ),
        migrations.CreateModel(
            name='ImageType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, unique=True)),
                ('unique', models.BooleanField(default=True)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'gcd_image_type',
            },
        ),
        migrations.CreateModel(
            name='IndiciaPublisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('year_began', models.IntegerField(db_index=True, null=True)),
                ('year_ended', models.IntegerField(null=True)),
                ('year_began_uncertain', models.BooleanField(db_index=True, default=False)),
                ('year_ended_uncertain', models.BooleanField(db_index=True, default=False)),
                ('notes', models.TextField()),
                ('url', models.URLField(blank=True, default='', max_length=255)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('is_surrogate', models.BooleanField(db_index=True, default=False)),
                ('issue_count', models.IntegerField(default=0)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stddata.Country')),
                ('keywords', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['name'],
                'db_table': 'gcd_indicia_publisher',
            },
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(db_index=True, max_length=50)),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('no_title', models.BooleanField(db_index=True, default=False)),
                ('volume', models.CharField(db_index=True, max_length=50)),
                ('no_volume', models.BooleanField(db_index=True, default=False)),
                ('display_volume_with_number', models.BooleanField(db_index=True, default=False)),
                ('isbn', models.CharField(db_index=True, max_length=32)),
                ('no_isbn', models.BooleanField(db_index=True, default=False)),
                ('valid_isbn', models.CharField(db_index=True, max_length=13)),
                ('variant_name', models.CharField(max_length=255)),
                ('barcode', models.CharField(db_index=True, max_length=38)),
                ('no_barcode', models.BooleanField(default=False)),
                ('rating', models.CharField(db_index=True, default='', max_length=255)),
                ('no_rating', models.BooleanField(db_index=True, default=False)),
                ('publication_date', models.CharField(max_length=255)),
                ('key_date', models.CharField(db_index=True, max_length=10)),
                ('on_sale_date', models.CharField(db_index=True, max_length=10)),
                ('on_sale_date_uncertain', models.BooleanField(default=False)),
                ('sort_code', models.IntegerField(db_index=True)),
                ('indicia_frequency', models.CharField(max_length=255)),
                ('no_indicia_frequency', models.BooleanField(db_index=True, default=False)),
                ('price', models.CharField(max_length=255)),
                ('page_count', models.DecimalField(decimal_places=3, max_digits=10, null=True)),
                ('page_count_uncertain', models.BooleanField(default=False)),
                ('editing', models.TextField()),
                ('no_editing', models.BooleanField(db_index=True, default=False)),
                ('notes', models.TextField()),
                ('indicia_pub_not_printed', models.BooleanField(default=False)),
                ('no_brand', models.BooleanField(db_index=True, default=False)),
                ('is_indexed', models.IntegerField(db_index=True, default=0)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True, db_index=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('brand', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gcd.Brand')),
                ('indicia_publisher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gcd.IndiciaPublisher')),
                ('keywords', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['series', 'sort_code'],
            },
        ),
        migrations.CreateModel(
            name='IssueReprint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(max_length=255)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('origin_issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_issue_reprints', to='gcd.Issue')),
                ('target_issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_issue_reprints', to='gcd.Issue')),
            ],
            options={
                'db_table': 'gcd_issue_reprint',
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('year_began', models.IntegerField(db_index=True, null=True)),
                ('year_ended', models.IntegerField(null=True)),
                ('year_began_uncertain', models.BooleanField(db_index=True, default=False)),
                ('year_ended_uncertain', models.BooleanField(db_index=True, default=False)),
                ('notes', models.TextField()),
                ('url', models.URLField(blank=True, default='', max_length=255)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('imprint_count', models.IntegerField(default=0)),
                ('brand_count', models.IntegerField(db_index=True, default=0)),
                ('indicia_publisher_count', models.IntegerField(db_index=True, default=0)),
                ('series_count', models.IntegerField(default=0)),
                ('issue_count', models.IntegerField(default=0)),
                ('is_master', models.BooleanField(db_index=True, default=False)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stddata.Country')),
                ('keywords', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imprint_set', to='gcd.Publisher')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Reprint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(max_length=255)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ReprintFromIssue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(max_length=255)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('origin_issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_reprints', to='gcd.Issue')),
            ],
            options={
                'db_table': 'gcd_reprint_from_issue',
            },
        ),
        migrations.CreateModel(
            name='ReprintToIssue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(max_length=255)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'db_table': 'gcd_reprint_to_issue',
            },
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('sort_name', models.CharField(db_index=True, max_length=255)),
                ('format', models.CharField(default='', max_length=255)),
                ('color', models.CharField(default='', max_length=255)),
                ('dimensions', models.CharField(default='', max_length=255)),
                ('paper_stock', models.CharField(default='', max_length=255)),
                ('binding', models.CharField(default='', max_length=255)),
                ('publishing_format', models.CharField(default='', max_length=255)),
                ('notes', models.TextField()),
                ('year_began', models.IntegerField(db_index=True)),
                ('year_ended', models.IntegerField(null=True)),
                ('year_began_uncertain', models.BooleanField(default=False)),
                ('year_ended_uncertain', models.BooleanField(default=False)),
                ('is_current', models.BooleanField(db_index=True, default=False)),
                ('publication_dates', models.CharField(max_length=255)),
                ('issue_count', models.IntegerField()),
                ('publication_notes', models.TextField()),
                ('tracking_notes', models.TextField()),
                ('has_barcode', models.BooleanField(default=False)),
                ('has_indicia_frequency', models.BooleanField(default=False)),
                ('has_isbn', models.BooleanField(default=False)),
                ('has_issue_title', models.BooleanField(default=False)),
                ('has_volume', models.BooleanField(default=False)),
                ('has_rating', models.BooleanField(default=False)),
                ('is_comics_publication', models.BooleanField(default=False)),
                ('is_singleton', models.BooleanField(default=False)),
                ('has_gallery', models.BooleanField(db_index=True, default=False)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('open_reserve', models.IntegerField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stddata.Country')),
                ('first_issue', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='first_issue_series_set', to='gcd.Issue')),
                ('keywords', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stddata.Language')),
                ('last_issue', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='last_issue_series_set', to='gcd.Issue')),
            ],
            options={
                'ordering': ['sort_name', 'year_began'],
            },
        ),
        migrations.CreateModel(
            name='SeriesBond',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(max_length=255)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'db_table': 'gcd_series_bond',
            },
        ),
        migrations.CreateModel(
            name='SeriesBondType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField()),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'gcd_series_bond_type',
            },
        ),
        migrations.CreateModel(
            name='SeriesPublicationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('notes', models.TextField()),
            ],
            options={
                'ordering': ['name'],
                'db_table': 'gcd_series_publication_type',
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('title_inferred', models.BooleanField(db_index=True, default=False)),
                ('feature', models.CharField(max_length=255)),
                ('sequence_number', models.IntegerField()),
                ('page_count', models.DecimalField(db_index=True, decimal_places=3, max_digits=10, null=True)),
                ('page_count_uncertain', models.BooleanField(db_index=True, default=False)),
                ('script', models.TextField()),
                ('pencils', models.TextField()),
                ('inks', models.TextField()),
                ('colors', models.TextField()),
                ('letters', models.TextField()),
                ('editing', models.TextField()),
                ('no_script', models.BooleanField(db_index=True, default=False)),
                ('no_pencils', models.BooleanField(db_index=True, default=False)),
                ('no_inks', models.BooleanField(db_index=True, default=False)),
                ('no_colors', models.BooleanField(db_index=True, default=False)),
                ('no_letters', models.BooleanField(db_index=True, default=False)),
                ('no_editing', models.BooleanField(db_index=True, default=False)),
                ('job_number', models.CharField(max_length=25)),
                ('genre', models.CharField(max_length=255)),
                ('characters', models.TextField()),
                ('synopsis', models.TextField()),
                ('reprint_notes', models.TextField()),
                ('notes', models.TextField()),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True, db_index=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcd.Issue')),
                ('keywords', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['sequence_number'],
            },
        ),
        migrations.CreateModel(
            name='StoryType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, unique=True)),
                ('sort_code', models.IntegerField(unique=True)),
            ],
            options={
                'ordering': ['sort_code'],
                'db_table': 'gcd_story_type',
            },
        ),
        migrations.AddField(
            model_name='story',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcd.StoryType'),
        ),
        migrations.AddField(
            model_name='seriesbond',
            name='bond_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcd.SeriesBondType'),
        ),
        migrations.AddField(
            model_name='seriesbond',
            name='origin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_series_bond', to='gcd.Series'),
        ),
        migrations.AddField(
            model_name='seriesbond',
            name='origin_issue',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='to_series_issue_bond', to='gcd.Issue'),
        ),
        migrations.AddField(
            model_name='seriesbond',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_series_bond', to='gcd.Series'),
        ),
        migrations.AddField(
            model_name='seriesbond',
            name='target_issue',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='from_series_issue_bond', to='gcd.Issue'),
        ),
        migrations.AddField(
            model_name='series',
            name='publication_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gcd.SeriesPublicationType'),
        ),
        migrations.AddField(
            model_name='series',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcd.Publisher'),
        ),
        migrations.AddField(
            model_name='reprinttoissue',
            name='origin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_issue_reprints', to='gcd.Story'),
        ),
        migrations.AddField(
            model_name='reprinttoissue',
            name='target_issue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_reprints', to='gcd.Issue'),
        ),
        migrations.AddField(
            model_name='reprintfromissue',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_issue_reprints', to='gcd.Story'),
        ),
        migrations.AddField(
            model_name='reprint',
            name='origin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_reprints', to='gcd.Story'),
        ),
        migrations.AddField(
            model_name='reprint',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_reprints', to='gcd.Story'),
        ),
        migrations.AddField(
            model_name='issue',
            name='series',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcd.Series'),
        ),
        migrations.AddField(
            model_name='issue',
            name='variant_of',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='variant_set', to='gcd.Issue'),
        ),
        migrations.AlterUniqueTogether(
            name='issue',
            unique_together=set([('series', 'sort_code')]),
        ),
        migrations.AddField(
            model_name='indiciapublisher',
            name='parent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcd.Publisher'),
        ),
        migrations.AddField(
            model_name='image',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcd.ImageType'),
        ),
        migrations.AddField(
            model_name='cover',
            name='issue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcd.Issue'),
        ),
        migrations.AddField(
            model_name='branduse',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcd.Publisher'),
        ),
        migrations.AddField(
            model_name='brandgroup',
            name='parent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcd.Publisher'),
        ),
        migrations.AddField(
            model_name='brand',
            name='group',
            field=models.ManyToManyField(blank=True, db_table='gcd_brand_emblem_group', to='gcd.BrandGroup'),
        ),
        migrations.AddField(
            model_name='brand',
            name='keywords',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='brand',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gcd.Publisher'),
        ),
    ]
