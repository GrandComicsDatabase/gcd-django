# -*- coding: utf-8 -*-
# Generated by Django 1.11.28 on 2020-02-23 15:53
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0002_auto_20150616_2121'),
        ('gcd', '0001_initial'),
        ('stddata', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('public', models.BooleanField(default=False, verbose_name='collection is public and can be viewed by all')),
                ('condition_used', models.BooleanField(default=False, verbose_name='show condition')),
                ('acquisition_date_used', models.BooleanField(default=False, verbose_name='show acquisition date')),
                ('sell_date_used', models.BooleanField(default=False, verbose_name='show sell data')),
                ('location_used', models.BooleanField(default=False, verbose_name='show location')),
                ('purchase_location_used', models.BooleanField(default=False, verbose_name='show purchase location')),
                ('own_used', models.BooleanField(default=False, verbose_name='show own/want status')),
                ('own_default', models.NullBooleanField(default=None, verbose_name='default ownership status when adding items to this collection')),
                ('was_read_used', models.BooleanField(default=False, verbose_name='show read status')),
                ('for_sale_used', models.BooleanField(default=False, verbose_name='show for sale status')),
                ('signed_used', models.BooleanField(default=False, verbose_name='show signed status')),
                ('price_paid_used', models.BooleanField(default=False, verbose_name='show price paid')),
                ('market_value_used', models.BooleanField(default=False, verbose_name='show entered market value')),
                ('sell_price_used', models.BooleanField(default=False, verbose_name='show sell price')),
            ],
        ),
        migrations.CreateModel(
            name='CollectionItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True)),
                ('own', models.NullBooleanField(default=None, verbose_name='ownership')),
                ('was_read', models.NullBooleanField(default=None)),
                ('for_sale', models.BooleanField(default=False)),
                ('signed', models.BooleanField(default=False)),
                ('price_paid', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('market_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('sell_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('acquisition_date', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='stddata.Date')),
                ('collections', models.ManyToManyField(db_table='mycomics_collection_item_collections', related_name='items', to='mycomics.Collection')),
            ],
            options={
                'ordering': ['issue__series__sort_name', 'issue__series__year_began', 'issue__sort_code', 'id'],
                'db_table': 'mycomics_collection_item',
            },
        ),
        migrations.CreateModel(
            name='Collector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='stddata.Currency')),
                ('default_have_collection', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mycomics.Collection')),
                ('default_language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='stddata.Language')),
                ('default_want_collection', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mycomics.Collection')),
            ],
        ),
        migrations.CreateModel(
            name='ConditionGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=255)),
                ('value', models.FloatField()),
            ],
            options={
                'db_table': 'mycomics_condition_grade',
            },
        ),
        migrations.CreateModel(
            name='ConditionGradeScale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=2000)),
            ],
            options={
                'db_table': 'mycomics_condition_grade_scale',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mycomics.Collector')),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mycomics.Collector')),
            ],
            options={
                'db_table': 'mycomics_purchase_location',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_pulled', models.DateTimeField()),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='mycomics.Collection')),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcd.Series')),
            ],
            options={
                'db_table': 'mycomics_subscription',
            },
        ),
        migrations.AddField(
            model_name='conditiongrade',
            name='scale',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='mycomics.ConditionGradeScale'),
        ),
        migrations.AddField(
            model_name='collector',
            name='grade_system',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mycomics.ConditionGradeScale'),
        ),
        migrations.AddField(
            model_name='collector',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='collectionitem',
            name='grade',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mycomics.ConditionGrade'),
        ),
        migrations.AddField(
            model_name='collectionitem',
            name='issue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcd.Issue'),
        ),
        migrations.AddField(
            model_name='collectionitem',
            name='keywords',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='collectionitem',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='mycomics.Location'),
        ),
        migrations.AddField(
            model_name='collectionitem',
            name='market_value_currency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='stddata.Currency'),
        ),
        migrations.AddField(
            model_name='collectionitem',
            name='price_paid_currency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='stddata.Currency'),
        ),
        migrations.AddField(
            model_name='collectionitem',
            name='purchase_location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='mycomics.PurchaseLocation'),
        ),
        migrations.AddField(
            model_name='collectionitem',
            name='sell_date',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='stddata.Date'),
        ),
        migrations.AddField(
            model_name='collectionitem',
            name='sell_price_currency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='stddata.Currency'),
        ),
        migrations.AddField(
            model_name='collection',
            name='collector',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections', to='mycomics.Collector'),
        ),
        migrations.AddField(
            model_name='collection',
            name='keywords',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
